
a = 8479994658316772151941616510097127087554541274812435112009425778595495359700244470400642403747058566807127814165396640215844192327900454116257979487432016769329970767046735091249898678088061634796559556704959846424131820416048436501387617211770124292793308079214153179977624440438616958575058361193975686620046439877308339989295604537867493683872778843921771307305602776398786978353866231661453376056771972069776398999013769588936194859344941268223184197231368887060609212875507518936172060702209557124430477137421847130682601666968691651447236917018634902407704797328509461854842432015009878011354022108661461024768

p = 30531851861994333252675935111487950694414332763909083514133769861350960895076504687261369815735742549428789138300843082086550059082835141454526618160634109969195486322015775943030060449557090064811940139431735209185996454739163555910726493597222646855506445602953689527405362207926990442391705014604777038685880527537489845359101552442292804398472642356609304810680731556542002301547846635101455995732584071355903010856718680732337369128498655255277003643669031694516851390505923416710601212618443109844041514942401969629158975457079026906304328749039997262960301209158175920051890620947063936347307238412281568760161


def check_legendre(a,p):
    return pow(a,(p-1)//2,p)


def step1(p):
    s = 0
    st = p-1
    while st%2 ==0:
        st = st//2
        s += 1
    q = (p-1)//(2**s)
    return q,s

def step2(p):
    for i in range(1,1000):
        res = check_legendre(i,p)
        if res != 1:
            res -= p
        if res == -1:
            break
    return i

def step3(s,q,z,a):
    m_current = s
    c_current = pow(z,q,p)
    t_current = pow(a,q,p)
    r_current = pow(a,((q+1)//2),p)

    while True:
        m_next = eq1(m_current,t_current,p)
        c_next = eq2(m_current,m_next,c_current)
        t_next = eq3(t_current,m_current,m_next,c_current)
        r_next = eq4(r_current,m_current,m_next,c_current)
        m_current = m_next
        c_current = c_next
        t_current = t_next
        r_current = r_next

        if t_next%p==1:
            break
    return r_current%p

def eq1(m_current,t,p):
    for i in range(m_current):
        m_next = pow(t,2**i,p)
        if m_next % p ==1:
            break
    return i

def eq2(m_current,m_next,c):
    return pow(c,pow(2,(m_current-m_next),p),p)%p

def eq3(t,m_current,m_next,c):
    res = t*pow(c,pow(2,(m_current-m_next),p),p)%p
    return res

def eq4(r,m_current,m_next,c):
    return r*pow(c,(pow(2,(m_current-m_next-1),p)),p)%p

def tonelli_shanks(a,p):
    q, s = step1(p)
    print(q, s)
    z = step2(p)
    print(s,q,z,a)
    r = step3(s,q,z,a)
    print("r:",r)

tonelli_shanks(a,p)



